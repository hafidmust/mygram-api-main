// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "mygram-api/domain"

	mock "github.com/stretchr/testify/mock"
)

// PhotoUseCase is an autogenerated mock type for the PhotoUseCase type
type PhotoUseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *PhotoUseCase) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: _a0, _a1
func (_m *PhotoUseCase) Fetch(_a0 context.Context, _a1 *[]domain.Photo) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]domain.Photo) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: _a0, _a1, _a2
func (_m *PhotoUseCase) GetByID(_a0 context.Context, _a1 *domain.Photo, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Photo, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *PhotoUseCase) Store(_a0 context.Context, _a1 *domain.Photo) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Photo) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *PhotoUseCase) Update(_a0 context.Context, _a1 domain.Photo, _a2 string) (domain.Photo, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 domain.Photo
	if rf, ok := ret.Get(0).(func(context.Context, domain.Photo, string) domain.Photo); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Photo, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPhotoUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPhotoUseCase creates a new instance of PhotoUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPhotoUseCase(t mockConstructorTestingTNewPhotoUseCase) *PhotoUseCase {
	mock := &PhotoUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
